// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repo

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PayrollPayPeriod string

const (
	PayrollPayPeriodWeekly   PayrollPayPeriod = "weekly"
	PayrollPayPeriodBiweekly PayrollPayPeriod = "biweekly"
	PayrollPayPeriodMonthly  PayrollPayPeriod = "monthly"
)

func (e *PayrollPayPeriod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PayrollPayPeriod(s)
	case string:
		*e = PayrollPayPeriod(s)
	default:
		return fmt.Errorf("unsupported scan type for PayrollPayPeriod: %T", src)
	}
	return nil
}

type NullPayrollPayPeriod struct {
	PayrollPayPeriod PayrollPayPeriod
	Valid            bool // Valid is true if PayrollPayPeriod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPayrollPayPeriod) Scan(value interface{}) error {
	if value == nil {
		ns.PayrollPayPeriod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PayrollPayPeriod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPayrollPayPeriod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PayrollPayPeriod), nil
}

type PayrollStatus string

const (
	PayrollStatusDraft   PayrollStatus = "draft"
	PayrollStatusPending PayrollStatus = "pending"
	PayrollStatusPaid    PayrollStatus = "paid"
	PayrollStatusVoid    PayrollStatus = "void"
)

func (e *PayrollStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PayrollStatus(s)
	case string:
		*e = PayrollStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PayrollStatus: %T", src)
	}
	return nil
}

type NullPayrollStatus struct {
	PayrollStatus PayrollStatus
	Valid         bool // Valid is true if PayrollStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPayrollStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PayrollStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PayrollStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPayrollStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PayrollStatus), nil
}

type Crew struct {
	ID   int64
	Name string
}

type Earning struct {
	ID           int64
	Amount       pgtype.Numeric
	DateOfWork   pgtype.Date
	PayrollID    int64
	WorkerID     int64
	CrewID       pgtype.Int8
	HoursWorked  pgtype.Numeric
	HoursOffered pgtype.Numeric
	PieceUnits   pgtype.Numeric
}

type Payroll struct {
	ID          int64
	PayPeriod   PayrollPayPeriod
	PeriodStart pgtype.Date
	PeriodEnd   pgtype.Date
	Status      PayrollStatus
}

type Worker struct {
	ID        int64
	FirstName string
	LastName  string
}
